name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-deploy:
    runs-on: [self-hosted, Linux, X64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    # Setup Java and Maven
    - name: Set up Java and Maven
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
        cache: 'maven'

    - name: Configure Maven settings
      run: |
        mkdir -p ~/.m2
        cp settings.xml ~/.m2/settings.xml
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    - name: Build and Deploy to Nexus
      run: mvn clean deploy --settings ~/.m2/settings.xml
      env:
        NEXUS_USERNAME: ${{ secrets.NEXUS_USERNAME }}
        NEXUS_PASSWORD: ${{ secrets.NEXUS_PASSWORD }}

    # Docker Build
    - name: Build Docker Image
      run: |
        docker build -t maven-nexus:${{ github.sha }} .
        docker tag maven-nexus:${{ github.sha }} ${{ secrets.ECR_REPOSITORY_URI }}/maven-nexus:${{ github.sha }}

    # Trivy Security Scan
    - name: Trivy Scan
      run: docker run --rm -v /var/run/docker.sock:/var/run/docker.sock aquasec/trivy:latest image maven-nexus:${{ github.sha }}

    # AWS Credentials
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} \
        | docker login --username AWS --password-stdin ${{ secrets.ECR_REPOSITORY_URI }}

    - name: Push Docker Images to ECR
      run: |
        docker push ${{ secrets.ECR_REPOSITORY_URI }}/maven-nexus:${{ github.sha }}

    # Prepare Deployment YAML with image tag
    - name: Update K8s manifest with image tag
      run: |
        sed -i "s|IMAGE_TAG|${{ github.sha }}|g" deployment-service.yaml

    # Set up kubeconfig using public IP and disable TLS verify
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_CONTENT }}" | base64 -d > ~/.kube/config
        yq eval '.clusters[0].cluster["insecure-skip-tls-verify"] = true | del(.clusters[0].cluster.certificate-authority-data)' -i ~/.kube/config
        chmod 600 ~/.kube/config

    # Apply Kubernetes resources
    - name: Deploy to EC2 Kubernetes Cluster
      run: |
        kubectl delete all --all -n default
        kubectl apply -f deployment-service.yaml
        kubectl get pods
        kubectl get deployments
        kubectl get svc

